{"ast":null,"code":"import { encode as base64encode } from \"base64-arraybuffer\";\n\n/**\n * Implements helper functions to support Proof Key for Code Exchange (PKCE).\n * PKCE makes the use of OAuth 2.0 authorization code grant more secure.\n * \n * @author Ping Identity Technical Enablement\n * {@link https://docs.pingidentity.com/bundle/pingfederate-102/page/roj1564002966901.html}\n * {@link https://docs.pingidentity.com/bundle/pingfederate-102/page/nfr1564003024683.html}\n * {@link https://www.valentinog.com/blog/challenge/}\n*/\n\n/**\n * Generates the code_challenge parameter to support the PKCE workflow.\n * @param {string} codeVerifier Used to validate already received code_challenge\n * @return {string} Base64 digest.\n*/\nclass OAuthUtils {\n  async generateCodeChallenge(codeVerifier) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest(\"SHA-256\", data);\n    const base64Digest = base64encode(digest);\n    return base64Digest.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  /** \n   * Generates a random string used for state and PKCE code_challenge.\n   * @param {string} length Length of the generated string.\n   * @return {string} Random string of characters\n  */\n  getRandomString(length) {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n}\n;\nexport default OAuthUtils;","map":{"version":3,"names":["encode","base64encode","OAuthUtils","generateCodeChallenge","codeVerifier","encoder","TextEncoder","data","digest","window","crypto","subtle","base64Digest","replace","getRandomString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/vscode-workspaces/BXRetail/BXRetail-Apps/bxretail/src/components/Utils/OAuthUtils.js"],"sourcesContent":["import { encode as base64encode } from \"base64-arraybuffer\";\n\n/**\n * Implements helper functions to support Proof Key for Code Exchange (PKCE).\n * PKCE makes the use of OAuth 2.0 authorization code grant more secure.\n * \n * @author Ping Identity Technical Enablement\n * {@link https://docs.pingidentity.com/bundle/pingfederate-102/page/roj1564002966901.html}\n * {@link https://docs.pingidentity.com/bundle/pingfederate-102/page/nfr1564003024683.html}\n * {@link https://www.valentinog.com/blog/challenge/}\n*/\n\n/**\n * Generates the code_challenge parameter to support the PKCE workflow.\n * @param {string} codeVerifier Used to validate already received code_challenge\n * @return {string} Base64 digest.\n*/\nclass OAuthUtils {\n    async generateCodeChallenge(codeVerifier) {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(codeVerifier);\n      const digest = await window.crypto.subtle.digest(\"SHA-256\", data);\n      const base64Digest = base64encode(digest);\n      return base64Digest.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n    }\n\n    /** \n     * Generates a random string used for state and PKCE code_challenge.\n     * @param {string} length Length of the generated string.\n     * @return {string} Random string of characters\n    */\n    getRandomString(length) {\n      let result = '';\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      const charactersLength = characters.length;\n      for ( let i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n    }\n};\n\nexport default OAuthUtils;"],"mappings":"AAAA,SAASA,MAAM,IAAIC,YAAY,QAAQ,oBAAoB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACb,MAAMC,qBAAqB,CAACC,YAAY,EAAE;IACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,EAAE;IACjC,MAAMC,IAAI,GAAGF,OAAO,CAACL,MAAM,CAACI,YAAY,CAAC;IACzC,MAAMI,MAAM,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,SAAS,EAAED,IAAI,CAAC;IACjE,MAAMK,YAAY,GAAGX,YAAY,CAACO,MAAM,CAAC;IACzC,OAAOI,YAAY,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC/E;;EAEA;AACJ;AACA;AACA;AACA;EACIC,eAAe,CAACC,MAAM,EAAE;IACtB,IAAIC,MAAM,GAAG,EAAE;IACf,MAAMC,UAAU,GAAG,gEAAgE;IACnF,MAAMC,gBAAgB,GAAGD,UAAU,CAACF,MAAM;IAC1C,KAAM,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAG;MACjCH,MAAM,IAAIC,UAAU,CAACG,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,gBAAgB,CAAC,CAAC;IAC3E;IACA,OAAOF,MAAM;EACf;AACJ;AAAC;AAED,eAAed,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}