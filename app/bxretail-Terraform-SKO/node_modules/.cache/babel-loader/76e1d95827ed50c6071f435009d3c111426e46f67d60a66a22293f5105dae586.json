{"ast":null,"code":"// Components\nimport JSONSearch from \"../Utils/JSONSearch\";\n\n/** \n * Class representing utilities to operate on an access token.\n * \n * */\n\nclass Tokens {\n  /**\n   * Class constructor\n   */\n  constructor() {\n    this.envVars = window._env_;\n    this.jsonSearch = new JSONSearch();\n  }\n\n  /**\n   * Get a claim from a token\n   * Decodes and parses a token for a claim/attribute.\n   * \n   * @param {string} token OAuth JWT token.\n   * @param {string} key the claim needed from within the token, or \"all\" to get entire payload.\n   * @return {string} value for key requested or JSON web token.\n   */\n  getTokenValue(_ref) {\n    let {\n      token,\n      key\n    } = _ref;\n    console.info(\"Utils.Tokens\", \"Extracting a claim from a token.\");\n    // Extracting the payload portion of the JWT.\n    const base64Fragment = token.split(\".\")[1];\n    const decodedFragment = JSON.parse(atob(base64Fragment));\n    const jwtValue = this.jsonSearch.findValues(decodedFragment, key); //FIXME this can be probably be converted to Javascripts intrinsic functions.\n\n    return jwtValue[0];\n  }\n}\nexport default Tokens;","map":{"version":3,"names":["JSONSearch","Tokens","constructor","envVars","window","_env_","jsonSearch","getTokenValue","token","key","console","info","base64Fragment","split","decodedFragment","JSON","parse","atob","jwtValue","findValues"],"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/vscode-workspaces/BXRetail/BXRetail-Apps/bxretail/src/components/Utils/Tokens.js"],"sourcesContent":["// Components\nimport JSONSearch from \"../Utils/JSONSearch\";\n\n/** \n * Class representing utilities to operate on an access token.\n * \n * */ \n\nclass Tokens {\n    /**\n     * Class constructor\n     */\n    constructor() {\n        this.envVars = window._env_;\n        this.jsonSearch = new JSONSearch();\n    }\n\n    /**\n     * Get a claim from a token\n     * Decodes and parses a token for a claim/attribute.\n     * \n     * @param {string} token OAuth JWT token.\n     * @param {string} key the claim needed from within the token, or \"all\" to get entire payload.\n     * @return {string} value for key requested or JSON web token.\n     */\n    getTokenValue({ token, key }) {\n        console.info(\"Utils.Tokens\", \"Extracting a claim from a token.\");\n        // Extracting the payload portion of the JWT.\n        const base64Fragment = token.split(\".\")[1];\n        const decodedFragment = JSON.parse(atob(base64Fragment));\n        const jwtValue = this.jsonSearch.findValues(decodedFragment, key); //FIXME this can be probably be converted to Javascripts intrinsic functions.\n\n        return jwtValue[0];\n    }\n}\nexport default Tokens;"],"mappings":"AAAA;AACA,OAAOA,UAAU,MAAM,qBAAqB;;AAE5C;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,CAAC;EACT;AACJ;AACA;EACIC,WAAW,GAAG;IACV,IAAI,CAACC,OAAO,GAAGC,MAAM,CAACC,KAAK;IAC3B,IAAI,CAACC,UAAU,GAAG,IAAIN,UAAU,EAAE;EACtC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,aAAa,OAAiB;IAAA,IAAhB;MAAEC,KAAK;MAAEC;IAAI,CAAC;IACxBC,OAAO,CAACC,IAAI,CAAC,cAAc,EAAE,kCAAkC,CAAC;IAChE;IACA,MAAMC,cAAc,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,cAAc,CAAC,CAAC;IACxD,MAAMM,QAAQ,GAAG,IAAI,CAACZ,UAAU,CAACa,UAAU,CAACL,eAAe,EAAEL,GAAG,CAAC,CAAC,CAAC;;IAEnE,OAAOS,QAAQ,CAAC,CAAC,CAAC;EACtB;AACJ;AACA,eAAejB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}