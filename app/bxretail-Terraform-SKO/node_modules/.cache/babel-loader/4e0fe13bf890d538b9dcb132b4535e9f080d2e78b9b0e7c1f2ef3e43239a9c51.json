{"ast":null,"code":"// Components\nimport PingOneAuthZ from \"../Integration/PingOneAuthZ\";\nimport Session from \"../Utils/Session\";\nimport Tokens from \"../Utils/Tokens\";\n\n/**\n Class representing authorization flows via PingOne.\n This demo-specific class is developed and maintained by Ping Identity Technical Enablement.\n Implements methods to integrate with PingOne and PingAuthorize-related API endpoints.\n*/\n\nclass AuthZ {\n  /**\n  Class constructor\n  */\n  constructor() {\n    this.envVars = window._env_;\n    this.ping1AuthZ = new PingOneAuthZ(this.envVars.REACT_APP_AUTHPATH, this.envVars.REACT_APP_ENVID);\n    this.session = new Session();\n    this.tokens = new Tokens();\n  }\n\n  /**\n  Authentication Flow:\n  Initializes the authentication flow. Handler for different authentication API request and responses.\n   @see https://apidocs.pingidentity.com/pingone/platform/v1/api/#openid-connectoauth-2\n  @param {string} grantType The OAuth grant type to be used.\n  @param {string} clientId The OAuth client from which you want to authorize.\n  @param {string} redirectURI The URI the OAuth client should send you back to after completing OAuth authZ.\n  @param {string} scopes The app or OIDC scopes being requested by the client.\n  */\n  initAuthNFlow(_ref) {\n    let {\n      grantType,\n      clientId,\n      redirectURI,\n      scopes,\n      authPath\n    } = _ref;\n    console.info('Controller.AuthZ', 'Initializing an authorization flow with PingOne.');\n    if (grantType !== 'implicit' && grantType !== 'authCode') {\n      throw new Error('Invalid grant type provided. Controller.AuthZ.');\n    }\n    const responseType = grantType === 'implicit' ? 'token' : 'code';\n    if (!authPath) {\n      this.ping1AuthZ.authorize({\n        responseType: responseType,\n        clientId: clientId,\n        redirectURI: redirectURI,\n        scopes: scopes\n      });\n    }\n  }\n\n  /**\n  OAuth Token:\n  Swap an authZ code for an authZ and ID token.\n   @see https://apidocs.pingidentity.com/pingone/platform/v1/api/#post-token-authorization_code\n  @param {string} code authorization code from AS.\n  @param {string} redirectURI App URL user should be redirected to after swap for token.\n  @returns {object} response\n  */\n\n  async swapCodeForToken(_ref2) {\n    let {\n      code,\n      redirectURI,\n      authMode,\n      clientId\n    } = _ref2;\n    console.info('Controller.AuthZ', 'Swapping an auth code for an access token.');\n    let authPath;\n    let bauth;\n    if (!authPath) {\n      bauth = this.envVars.REACT_APP_CLIENT + ':' + this.envVars.REACT_APP_RECSET;\n    } else {\n      bauth = this.envVars.REACT_APP_ATVP_CLIENT + ':' + this.envVars.REACT_APP_ATVP_RECSET;\n    }\n    const swaprods = btoa(bauth); //TODO deprecated function to be updated.\n\n    let response;\n    if (!authPath) {\n      response = await this.ping1AuthZ.getToken({\n        code: code,\n        redirectURI: redirectURI,\n        swaprods: swaprods,\n        clientId: clientId\n      });\n    } else {\n      console.warn('Unexpected issue with the \"authPath\" variable.');\n    }\n    return response;\n  }\n}\nexport default AuthZ;","map":{"version":3,"names":["PingOneAuthZ","Session","Tokens","AuthZ","constructor","envVars","window","_env_","ping1AuthZ","REACT_APP_AUTHPATH","REACT_APP_ENVID","session","tokens","initAuthNFlow","grantType","clientId","redirectURI","scopes","authPath","console","info","Error","responseType","authorize","swapCodeForToken","code","authMode","bauth","REACT_APP_CLIENT","REACT_APP_RECSET","REACT_APP_ATVP_CLIENT","REACT_APP_ATVP_RECSET","swaprods","btoa","response","getToken","warn"],"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/vscode-workspaces/BXRetail/BXRetail-Apps/bxretail/src/components/Controller/AuthZ.js"],"sourcesContent":["// Components\nimport PingOneAuthZ from \"../Integration/PingOneAuthZ\";\nimport Session from \"../Utils/Session\";\nimport Tokens from \"../Utils/Tokens\";\n\n/**\n Class representing authorization flows via PingOne.\n This demo-specific class is developed and maintained by Ping Identity Technical Enablement.\n Implements methods to integrate with PingOne and PingAuthorize-related API endpoints.\n*/\n\nclass AuthZ {\n    /**\n    Class constructor\n    */\n    constructor() {\n        this.envVars = window._env_;\n        this.ping1AuthZ = new PingOneAuthZ(this.envVars.REACT_APP_AUTHPATH, this.envVars.REACT_APP_ENVID);\n        this.session = new Session();\n        this.tokens = new Tokens();\n    }\n\n    /**\n    Authentication Flow:\n    Initializes the authentication flow. Handler for different authentication API request and responses.\n\n    @see https://apidocs.pingidentity.com/pingone/platform/v1/api/#openid-connectoauth-2\n    @param {string} grantType The OAuth grant type to be used.\n    @param {string} clientId The OAuth client from which you want to authorize.\n    @param {string} redirectURI The URI the OAuth client should send you back to after completing OAuth authZ.\n    @param {string} scopes The app or OIDC scopes being requested by the client.\n    */\n    initAuthNFlow({ grantType, clientId, redirectURI, scopes, authPath }) {\n        console.info('Controller.AuthZ', 'Initializing an authorization flow with PingOne.');\n\n        if (grantType !== 'implicit' && grantType !== 'authCode') {\n            throw new Error('Invalid grant type provided. Controller.AuthZ.');\n        }\n\n        const responseType = grantType === 'implicit' ? 'token' : 'code';\n        if (!authPath) {\n            this.ping1AuthZ.authorize({\n                responseType: responseType,\n                clientId: clientId,\n                redirectURI: redirectURI,\n                scopes: scopes,\n            });\n        } \n    }\n\n    /**\n    OAuth Token:\n    Swap an authZ code for an authZ and ID token.\n\n    @see https://apidocs.pingidentity.com/pingone/platform/v1/api/#post-token-authorization_code\n    @param {string} code authorization code from AS.\n    @param {string} redirectURI App URL user should be redirected to after swap for token.\n    @returns {object} response\n    */\n\n    async swapCodeForToken({ code, redirectURI, authMode, clientId }) {\n        console.info('Controller.AuthZ', 'Swapping an auth code for an access token.');\n\n        let authPath;\n        \n        let bauth;\n        if (!authPath) {\n            bauth = this.envVars.REACT_APP_CLIENT + ':' + this.envVars.REACT_APP_RECSET;\n        } else {\n            bauth = this.envVars.REACT_APP_ATVP_CLIENT + ':' + this.envVars.REACT_APP_ATVP_RECSET;\n        }\n        const swaprods = btoa(bauth); //TODO deprecated function to be updated.\n\n        let response;\n        if (!authPath) {\n            response = await this.ping1AuthZ.getToken({\n                code: code,\n                redirectURI: redirectURI,\n                swaprods: swaprods,\n                clientId: clientId,\n            });\n        } else {\n            console.warn('Unexpected issue with the \"authPath\" variable.');\n        }\n        return response;\n    }\n}\n\nexport default AuthZ;"],"mappings":"AAAA;AACA,OAAOA,YAAY,MAAM,6BAA6B;AACtD,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,CAAC;EACR;AACJ;AACA;EACIC,WAAW,GAAG;IACV,IAAI,CAACC,OAAO,GAAGC,MAAM,CAACC,KAAK;IAC3B,IAAI,CAACC,UAAU,GAAG,IAAIR,YAAY,CAAC,IAAI,CAACK,OAAO,CAACI,kBAAkB,EAAE,IAAI,CAACJ,OAAO,CAACK,eAAe,CAAC;IACjG,IAAI,CAACC,OAAO,GAAG,IAAIV,OAAO,EAAE;IAC5B,IAAI,CAACW,MAAM,GAAG,IAAIV,MAAM,EAAE;EAC9B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEIW,aAAa,OAAyD;IAAA,IAAxD;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAS,CAAC;IAChEC,OAAO,CAACC,IAAI,CAAC,kBAAkB,EAAE,kDAAkD,CAAC;IAEpF,IAAIN,SAAS,KAAK,UAAU,IAAIA,SAAS,KAAK,UAAU,EAAE;MACtD,MAAM,IAAIO,KAAK,CAAC,gDAAgD,CAAC;IACrE;IAEA,MAAMC,YAAY,GAAGR,SAAS,KAAK,UAAU,GAAG,OAAO,GAAG,MAAM;IAChE,IAAI,CAACI,QAAQ,EAAE;MACX,IAAI,CAACV,UAAU,CAACe,SAAS,CAAC;QACtBD,YAAY,EAAEA,YAAY;QAC1BP,QAAQ,EAAEA,QAAQ;QAClBC,WAAW,EAAEA,WAAW;QACxBC,MAAM,EAAEA;MACZ,CAAC,CAAC;IACN;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI,MAAMO,gBAAgB,QAA4C;IAAA,IAA3C;MAAEC,IAAI;MAAET,WAAW;MAAEU,QAAQ;MAAEX;IAAS,CAAC;IAC5DI,OAAO,CAACC,IAAI,CAAC,kBAAkB,EAAE,4CAA4C,CAAC;IAE9E,IAAIF,QAAQ;IAEZ,IAAIS,KAAK;IACT,IAAI,CAACT,QAAQ,EAAE;MACXS,KAAK,GAAG,IAAI,CAACtB,OAAO,CAACuB,gBAAgB,GAAG,GAAG,GAAG,IAAI,CAACvB,OAAO,CAACwB,gBAAgB;IAC/E,CAAC,MAAM;MACHF,KAAK,GAAG,IAAI,CAACtB,OAAO,CAACyB,qBAAqB,GAAG,GAAG,GAAG,IAAI,CAACzB,OAAO,CAAC0B,qBAAqB;IACzF;IACA,MAAMC,QAAQ,GAAGC,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC;;IAE9B,IAAIO,QAAQ;IACZ,IAAI,CAAChB,QAAQ,EAAE;MACXgB,QAAQ,GAAG,MAAM,IAAI,CAAC1B,UAAU,CAAC2B,QAAQ,CAAC;QACtCV,IAAI,EAAEA,IAAI;QACVT,WAAW,EAAEA,WAAW;QACxBgB,QAAQ,EAAEA,QAAQ;QAClBjB,QAAQ,EAAEA;MACd,CAAC,CAAC;IACN,CAAC,MAAM;MACHI,OAAO,CAACiB,IAAI,CAAC,gDAAgD,CAAC;IAClE;IACA,OAAOF,QAAQ;EACnB;AACJ;AAEA,eAAe/B,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}