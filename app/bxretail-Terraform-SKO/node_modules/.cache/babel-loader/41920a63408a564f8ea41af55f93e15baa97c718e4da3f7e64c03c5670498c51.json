{"ast":null,"code":"import OAuthUtils from '../Utils/OAuthUtils';\nimport Session from \"../Utils/Session\";\n\n/**\n * Class representing PingOne Authorization API's integration.\n * This demo-specific class is developed and maintained by Ping Identity Technical Enablement.\n * Implements methods to integrate with PingOne authentication-related API endpoints.\n * \n * This is a modified version of what comes with the live BXRetail app. This component was\n * stripped down to only what was necessary for the Terraform labs.\n * \n * @author Michael Sanchez, Technical Enablement\n*/\n\nclass PingOneAuthZ {\n  /**\n  Class constructor\n   * @param {string} authPath PingOne auth path for your regions tenant.\n   * @param {string} envId PingOne environment ID needed for authZ integrations.\n   */\n  constructor(authPath, envId) {\n    this.authzEndpoint = '/as/authorize';\n    this.tokenEndpoint = '/as/token';\n    this.authPath = authPath;\n    this.envId = envId;\n    this.OAuthUtils = new OAuthUtils();\n    this.Session = new Session();\n    this.envVars = window._env_;\n  }\n\n  /**\n   * Authorization endpoint\n   * Redirects the user to the authorize endpoint at PingOne.\n   * \n   * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#openid-connectoauth-2}\n   * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#get-authorize-authorization_code}\n   * \n   * @param {string} responseType The OAuth grant type. Options are \"code\" and \"token\".\n   * @param {string} clientId The client ID of the OAuth application.\n   * @param {string} redirectURI The URL to which the OAuth AS should redirect the user with a flowId.\n   * @param {string} scopes The OAuth scopes needed for the given for which the user is being authorized.\n   */\n  async authorize(_ref) {\n    let {\n      responseType,\n      clientId,\n      redirectURI,\n      scopes\n    } = _ref;\n    console.info('Integration.PingOneAuthZ.js', 'Sending user to the authorize endpoint to start an authN flow and get a flowId.');\n    let url = this.envVars.REACT_APP_P1HOST + '/' + this.envVars.REACT_APP_ENVID + '/as/authorize?response_type=' + responseType + '&client_id=' + clientId + '&redirect_uri=' + redirectURI + '&scope=' + scopes;\n\n    // Add pkce support for auth code grant types\n    if (responseType === 'code') {\n      const state = this.OAuthUtils.getRandomString(20);\n      const code_verifier = this.OAuthUtils.getRandomString(128);\n      let code_challenge;\n      try {\n        code_challenge = await this.OAuthUtils.generateCodeChallenge(code_verifier);\n      } catch (e) {\n        console.error('Integration.PingOneAuthZ.js', 'Error generating code challenge', e);\n        throw new Error('Integration.PingOneAuthZ.js', 'Unexpected exception in generateCodeChallenge().');\n      }\n\n      // Save pkce code_verifier and state values\n      this.Session.setAuthenticatedUserItem('state', state, 'session');\n      this.Session.setAuthenticatedUserItem('code_verifier', code_verifier, 'session');\n      url += '&state=' + state + '&code_challenge=' + code_challenge + '&code_challenge_method=S256';\n    }\n    window.location.assign(url);\n  }\n\n  /**\n   * OAuth Token\n   * Swaps an OAuth code for an OAuth access token.\n   * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#post-token-authorization_code-none}\n   * \n   * @param {string} code Authorization code from AS.\n   * @param {string} redirectURI App URL user should be redirected to after swap for token.\n   * @returns {object} JSON formatted response object.\n   */\n  async getToken(_ref2) {\n    let {\n      code,\n      redirectURI,\n      swaprods,\n      clientId\n    } = _ref2;\n    console.info('Integration.PingOneAuthZ.js', 'Swapping an authorization code for an access token.');\n    let myHeaders = new Headers();\n    // myHeaders.append('Authorization', 'Basic ' + swaprods);\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n    let urlencoded = new URLSearchParams();\n    urlencoded.append('grant_type', 'authorization_code'); // Grant type should ideally be a param passed in. But in the demos we're only doing auth code.\n    urlencoded.append('code', code);\n    urlencoded.append('redirect_uri', redirectURI);\n    urlencoded.append('client_id', clientId);\n    urlencoded.append('code_verifier', this.Session.getAuthenticatedUserItem('code_verifier', 'session'));\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'manual'\n    };\n    const url = this.authPath + '/auth/' + this.envVars.REACT_APP_ENVID + '/as/token';\n    const response = await fetch(url, requestOptions);\n    const jsonResponse = await response.json();\n    return jsonResponse;\n  }\n}\nexport default PingOneAuthZ;","map":{"version":3,"names":["OAuthUtils","Session","PingOneAuthZ","constructor","authPath","envId","authzEndpoint","tokenEndpoint","envVars","window","_env_","authorize","responseType","clientId","redirectURI","scopes","console","info","url","REACT_APP_P1HOST","REACT_APP_ENVID","state","getRandomString","code_verifier","code_challenge","generateCodeChallenge","e","error","Error","setAuthenticatedUserItem","location","assign","getToken","code","swaprods","myHeaders","Headers","append","urlencoded","URLSearchParams","getAuthenticatedUserItem","requestOptions","method","headers","body","redirect","response","fetch","jsonResponse","json"],"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/vscode-workspaces/BXRetail/BXRetail-Apps/bxretail/src/components/Integration/PingOneAuthZ.js"],"sourcesContent":["import OAuthUtils from '../Utils/OAuthUtils';\nimport Session from \"../Utils/Session\";\n\n/**\n * Class representing PingOne Authorization API's integration.\n * This demo-specific class is developed and maintained by Ping Identity Technical Enablement.\n * Implements methods to integrate with PingOne authentication-related API endpoints.\n * \n * This is a modified version of what comes with the live BXRetail app. This component was\n * stripped down to only what was necessary for the Terraform labs.\n * \n * @author Michael Sanchez, Technical Enablement\n*/\n\nclass PingOneAuthZ {\n    authzEndpoint = '/as/authorize';\n    tokenEndpoint = '/as/token';\n\n    /**\n    Class constructor\n     * @param {string} authPath PingOne auth path for your regions tenant.\n     * @param {string} envId PingOne environment ID needed for authZ integrations.\n     */\n    constructor(authPath, envId) {\n        this.authPath = authPath;\n        this.envId = envId;\n        this.OAuthUtils = new OAuthUtils();\n        this.Session = new Session();\n        this.envVars = window._env_;\n    }\n\n    /**\n     * Authorization endpoint\n     * Redirects the user to the authorize endpoint at PingOne.\n     * \n     * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#openid-connectoauth-2}\n     * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#get-authorize-authorization_code}\n     * \n     * @param {string} responseType The OAuth grant type. Options are \"code\" and \"token\".\n     * @param {string} clientId The client ID of the OAuth application.\n     * @param {string} redirectURI The URL to which the OAuth AS should redirect the user with a flowId.\n     * @param {string} scopes The OAuth scopes needed for the given for which the user is being authorized.\n     */\n    async authorize({ responseType, clientId, redirectURI, scopes }) {\n        console.info(\n            'Integration.PingOneAuthZ.js',\n            'Sending user to the authorize endpoint to start an authN flow and get a flowId.'\n        );\n\n        let url =\n            this.envVars.REACT_APP_P1HOST +\n            '/' +\n            this.envVars.REACT_APP_ENVID +\n            '/as/authorize?response_type=' +\n            responseType +\n            '&client_id=' +\n            clientId +\n            '&redirect_uri=' +\n            redirectURI +\n            '&scope=' +\n            scopes;\n\n        // Add pkce support for auth code grant types\n        if (responseType === 'code') {\n            const state = this.OAuthUtils.getRandomString(20);\n            const code_verifier = this.OAuthUtils.getRandomString(128);\n            let code_challenge;\n\n            try {\n                code_challenge = await this.OAuthUtils.generateCodeChallenge(code_verifier);\n            } catch (e) {\n                console.error('Integration.PingOneAuthZ.js', 'Error generating code challenge', e);\n                throw new Error('Integration.PingOneAuthZ.js', 'Unexpected exception in generateCodeChallenge().');\n            }\n\n            // Save pkce code_verifier and state values\n            this.Session.setAuthenticatedUserItem('state', state, 'session');\n            this.Session.setAuthenticatedUserItem('code_verifier', code_verifier, 'session');\n\n            url += '&state=' + state + '&code_challenge=' + code_challenge + '&code_challenge_method=S256';\n        }\n\n        window.location.assign(url);\n    }\n\n    /**\n     * OAuth Token\n     * Swaps an OAuth code for an OAuth access token.\n     * {@link https://apidocs.pingidentity.com/pingone/platform/v1/api/#post-token-authorization_code-none}\n     * \n     * @param {string} code Authorization code from AS.\n     * @param {string} redirectURI App URL user should be redirected to after swap for token.\n     * @returns {object} JSON formatted response object.\n     */\n    async getToken({ code, redirectURI, swaprods, clientId }) {\n        console.info('Integration.PingOneAuthZ.js', 'Swapping an authorization code for an access token.');\n\n        let myHeaders = new Headers();\n        // myHeaders.append('Authorization', 'Basic ' + swaprods);\n        myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n        let urlencoded = new URLSearchParams();\n        urlencoded.append('grant_type', 'authorization_code'); // Grant type should ideally be a param passed in. But in the demos we're only doing auth code.\n        urlencoded.append('code', code);\n        urlencoded.append('redirect_uri', redirectURI);\n        urlencoded.append('client_id', clientId);\n        urlencoded.append('code_verifier', this.Session.getAuthenticatedUserItem('code_verifier', 'session'));\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: urlencoded,\n            redirect: 'manual',\n        };\n        const url = this.authPath + '/auth/' + this.envVars.REACT_APP_ENVID + '/as/token';\n        const response = await fetch(url, requestOptions);\n        const jsonResponse = await response.json();\n        return jsonResponse;\n    }\n}\nexport default PingOneAuthZ;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}